def final projectId = '@project_id@'
def final componentId = '@component_id@'
def final groupId = '@group_id@'
def final credentialsId = "${projectId}-cd-cd-user-with-password"
def sharedLibraryRepository
def dockerRegistry
node {
  sharedLibraryRepository = env.SHARED_LIBRARY_REPOSITORY
  dockerRegistry = env.DOCKER_REGISTRY
}

library identifier: 'ods-library@latest', retriever: modernSCM(
  [$class: 'GitSCMSource',
   remote: sharedLibraryRepository,
   credentialsId: credentialsId])

// See readme of shared library for usage and customization.
odsPipeline(
  image: "${dockerRegistry}/cd/jenkins-slave-scala",
  projectId: projectId,
  componentId: componentId,
  groupId: groupId,
  verbose: true
) { context ->
  stageBuild(context)
  stageScanForSonarqube(context)
  stageUploadToNexus(context)
  stageCreateOpenshiftEnvironment(context)
  stageUpdateOpenshiftBuild(context)
  stageDeployToOpenshift(context)
  stageTriggerAllBuilds(context)
}

def stageBuild(def context) {
  stage('Test') {
    withEnv(["TAGVERSION=${context.tagversion}"]){
      sh "sbt test"
    }
    archiveBuild(context)
  }
}

def stageUploadToNexus(def context) {
  stage('Upload to Nexus') {
    def distFile = "${context.componentId}-${context.tagversion}.jar"
    sh "curl -u ${context.nexusUsername}:${context.nexusPassword} --upload-file ${distFile} ${context.nexusHost}/repository/candidates/${context.groupId.replace('.', '/')}/${context.componentId}/${context.tagversion}/${distFile}"
  }
}

def archiveBuild(def context) {
  def distFile = "${context.componentId}-${context.tagversion}.jar"
  sh "sbt assembly"
  sh "mv /tmp/sclapp.jar ${distFile}"
}
