def final projectId = '@project_id@'
def final componentId = '@component_id@'
def final credentialsId = "${projectId}-cd-cd-user-with-password"
def sharedLibraryRepository
def dockerRegistry
node {
  sharedLibraryRepository = env.SHARED_LIBRARY_REPOSITORY
  dockerRegistry = env.DOCKER_REGISTRY
}

library identifier: 'ods-library@production', retriever: modernSCM(
  [$class: 'GitSCMSource',
   remote: sharedLibraryRepository,
   credentialsId: credentialsId])

// See readme of shared library for usage and customization.
odsPipeline(
  image: "${dockerRegistry}/cd/jenkins-slave-python",
  projectId: projectId,
  componentId: componentId,
  branchToEnvironmentMapping: [
    'master': 'test',
    '*': 'dev'
  ]
) { context ->
  stageBuild(context)
  stageScanForSonarqube(context)
  stageStartOpenshiftBuild(context, [nexusHostWithBasicAuth: context.nexusHostWithBasicAuth])
  stageDeployToOpenshift(context)
  stageTriggerAllBuilds(context)
}

def stageBuild(def context) {
  withEnv(["TAGVERSION=${context.tagversion}"]) {
      stage('Test') {
        sh """
              pip install --user virtualenv &&
              virtualenv venv &&
              . \$(pwd)/venv/bin/activate &&
              pip install -r src/test_requirements.txt &&
              export PYTHONPATH="src" &&
              cd src/tests && nosetests -v
          """
      }
      stage('PEP8') {
        // Stage is VERY IMPORTANT! Do not remove or comment!
        sh """
             cd src &&
             pycodestyle --show-source --show-pep8 . &&
             pycodestyle --statistics -qq .
        """
      }
      stage('Build') {
         sh """
            mkdir docker/dist
            cp -r src docker/dist
          """
      }
  }
}
