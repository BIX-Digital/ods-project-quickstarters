load_module /usr/lib/nginx/modules/ngx_http_modsecurity_module.so;

daemon off;

# loading into nginx OS required environment variables
env SERVER_SIGNATURE;
env SERVICE;

worker_processes auto;

pid /var/cache/nginx/nginx.pid;

events {
    worker_connections  1024;
}

http {
    # ModSecurity configuration file. Here modsecurity.conf is loaded.
    include "/etc/nginx/modsecurity-init.conf";

    # Lua configurations
    lua_package_path    '/etc/nginx/lua/?.lua;;';
    lua_ssl_verify_depth 2;
    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

    proxy_temp_path /var/cache/nginx/proxy_temp;
    client_body_temp_path /var/cache/nginx/client_temp;
    fastcgi_temp_path /var/cache/nginx/fastcgi_temp;
    uwsgi_temp_path /var/cache/nginx/uwsgi_temp;
    scgi_temp_path /var/cache/nginx/scgi_temp;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # error_log  /var/log/nginx/error.log warn;
    # access_log  /var/log/nginx/access.log  main;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
    error_log /dev/stdout warn;
    access_log /dev/stdout main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    gzip on;
    gzip_disable "msie6";

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;
    ssl_session_cache    shared:SSL:10m;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header x-xss-protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options nosniff;
    # add_header Content-Security-Policy "default-src 'none'; script-src 'none'; img-src 'none' data:; style-src 'none' 'unsafe-inline'; font-src 'none' data:; frame-src 'none'; connect-src 'none' https://apis.google.com; object-src 'none' ";

    server {
        listen  8080   default_server;
        listen  [::]:8080   default_server;

        server_name _;

        client_max_body_size 50M;
        client_body_buffer_size 50M;

        # nginx variables set by Lua
        set_by_lua $server_signature 'return os.getenv("SERVER_SIGNATURE")';
        set_by_lua $service 'return os.getenv("SERVICE")';

        # modifying HTTP server signature header
        more_set_headers "Server: ${server_signature}";
        server_tokens off;

        # redirect server error pages to the static page /50x.html
        error_page   500 501 502 503 504  /50x.html;

        location / {
            # adding resolver to let nginx know where it is
            include "/etc/nginx/resolver.conf";

            # Set proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout       600;
            proxy_send_timeout          600;
            proxy_read_timeout          600;
            send_timeout                600;

            # buffer size set to 16k (default was 8k) - might be required to be uncommented/customize if responses are cut
            # proxy_buffer_size 16k;
            # proxy_buffers 8 16k;

            # the proxy
            proxy_pass http://$service:8080;
            # removing proxy_redirect default, you might require to setup a specific redirect rewrite rule http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_redirect
            proxy_redirect off;

            # Enable connection Upgrade request for WebSockets
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade, keep-alive";
        }

        # OpenShift readiness/liveness probes endpoint example
        location /server/health {
            add_header Content-Type application/json;
            return 200 '{"status":"up"}';
        }

        # when redirected to /50x.html static page load server-error lua module
        location = /50x.html {
            content_by_lua_block {
                require("server-error").run(ngx.var.server_signature)
            }
        }

    }

}
