def final projectId = "@project_id@"
def final componentId = "@component_id@"
def openshiftProjectId = "${projectId}-cd"
def final credentialId = openshiftProjectId + '-cd-user-with-password'
def gitUrl = "@git_url_http@"

def branchToBuild = 'xxx'
def pushResult = 'Everything up-to-date'
def tagversion
def jobName = env.JOB_NAME
def isMasterBuild = jobName.contains("test")
def environment = isMasterBuild ? "test" : "dev"
def shortBranchName
def isPipelineResponsible

println "Environment: ${environment}"

node('master') {
  wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
    stage('guard') {
      // check if push is for a branch we this job cares about
      branchToBuild = determineBranchToBuild(credentialId, gitUrl)
      isPipelineResponsible = canBeBuilt(branchToBuild, isMasterBuild)
      if (!isPipelineResponsible) {
        currentBuild.result = currentBuild.getPreviousBuild()?.getResult() // keep status from previous build
        currentBuild.displayName = "#${env.BUILD_NUMBER}-not responsible"
        println("This job:${jobName} is not responsible for building: ${branchToBuild}")
      }
    }
    if (!isMasterBuild && isPipelineResponsible) {
      stage('update branch') {
        try {
          deleteDir()
          updateBranch(pushResult, credentialId, gitUrl, branchToBuild)
        } catch (ignored) {
          currentBuild.result = 'ABORTED'
          notifyNotGreen()
        }
      }
    }
  }
}

if (isPipelineResponsible && branchIsUpToDate(pushResult)) {
  def gitCommit = 'xxx'
  node('maven') {
    def distFile
    try {
      wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
        stage('prepare') {
          println("credentialId=${credentialId}")
          git url: gitUrl, branch: branchToBuild, credentialsId: credentialId
          gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
          tagversion = "$BUILD_NUMBER-${gitCommit.take(8)}"
          shortBranchName = extractShortBranchName(branchToBuild)
          currentBuild.displayName = "${shortBranchName}/#${tagversion}"
          withEnv(["TAGVERSION=$tagversion"]) {
            sh "ls -la"
            stage('test') {
                withEnv(["TAGVERSION=$tagversion"]) {
                  // sh "python src/tests.py"
                }
            }

            stage('createImage') {
                sh "oc project ${projectId}-${environment}"
                patchBC(projectId, componentId, environment, tagversion, gitUrl, branchToBuild)
                sh "oc start-build ${componentId} -e projectId=${projectId} -e componentId=${componentId} -e tagversion=${tagversion} --wait=true -n ${projectId}-${environment}"
                openshiftTag(sourceStream: "${componentId}", sourceTag: tagversion,
                        destinationStream: "${componentId}", destinationTag: "latest", namespace: "${projectId}-${environment}")
            }

          }
        }
      }
    } catch (ignored) {
      currentBuild.result='FAILED'
      notifyNotGreen()
    }
  }
}

private boolean branchIsUpToDate(String pushResult) {
  "Everything up-to-date".equals(pushResult.trim())
}

private void patchBC(projectId, componentId, environment, tagversion, gitUrl, branchToBuild) {
    sh "echo 'patching bc...'"
    sh """oc patch bc ${componentId} --patch '
     spec:
       output:
         to:
           kind: ImageStreamTag
           name: ${componentId}:${tagversion}
       runPolicy: Serial
       source:
         type: Git
         git:
           uri: ${gitUrl}
           ref: ${branchToBuild}
         contextDir: docker
         sourceSecret:
           name: cd-user-token
       strategy:
         type: Docker
         dockerstrategy:
           env:
             - name: projectId
               value: ${projectId}
             - name: componentId
               value: ${componentId}
             - name: tagversion
               value: ${tagversion}
      ' -n ${projectId}-${environment}"""
}

private void extractShortBranchName(String branch) {
  if ("master".equals(branch)) {
    branch
  } else if (branch.startsWith("feature/")) {
    branch.drop("feature/".length())
  } else if (branch.startsWith("bugfix/")) {
    branch.drop("bugfix/".length())
  } else if (branch.startsWith("hotfix/")) {
    branch.drop("hotfix/".length())
  } else if (branch.startsWith("release/")) {
    branch.drop("release/".length())
  } else {
    branch
  }
}

private void updateBranch(pushResult, credentialId, String gitUrl, String branchToBuild) {
  println("branchToBuild=${branchToBuild}")
  git url: gitUrl, branch: 'master', credentialsId: credentialId
  withCredentials([usernameColonPassword(credentialsId: credentialId, variable: 'USERPASS')]) {
    withEnv(["BRANCH_TO_BUILD=${branchToBuild}"]) {
      sh '''
                git config user.name "Jenkins CD User"
                git config user.email "cd_user@opendevstack.org"
                git config credential.helper store
                echo "https://${USERPASS}@opendevstack.org" > ~/.git-credentials
                git checkout ${BRANCH_TO_BUILD}
                git merge origin/${BRANCH_TO_BUILD}
                '''
      mergeResult = sh returnStdout: true, script: '''
                # Merge master to BRANCH
                git merge --no-edit -m "Merging master to ${BRANCH_TO_BUILD}" origin/master
                '''
      if (!mergeResult.trim().contains("Already up-to-date.")) {
        pushResult = sh returnStdout: true, script: '''
                    git push origin ${BRANCH_TO_BUILD} 2>&1
                    '''
        println("pushResult=${pushResult}")

      }
    }
  }
}

private void determineBranchToBuild(credId, gitUrl) {
  git url: gitUrl, branch: 'master', credentialsId: credId
  withCredentials([usernameColonPassword(credentialsId: credId, variable: 'USERPASS')]) {
    branchToBuildTmp = sh returnStdout: true, script: '''
            git config user.name "Jenkins CD User"
            git config user.email "cd_user@opendevstack.org"
            git config credential.helper store
            echo "https://${USERPASS}@opendevstack.org" > ~/.git-credentials
            git fetch
            # return branch with most recent commit
            # git branch -r --sort=-committerdate | head -1 | cut -c10-
            # openshift jenkins slave has too old git client installed, so fall back to for-each-ref
            git for-each-ref --sort=-committerdate refs/remotes/origin | cut -c69- | head -1
        '''
    sh returnStdout: true, script: "git for-each-ref --sort=-committerdate refs/remotes/origin"
    return branchToBuildTmp.trim()
  }
}

private boolean canBeBuilt(String branch, boolean masterBuild) {
  if ("master".equals(branch) && masterBuild) {
    true
  } else if (branch.startsWith("feature/")
    || branch.startsWith("hotfix/")
    || branch.startsWith("bugfix/")
    || branch.startsWith("release/")
  ) {
    return !masterBuild
  } else {
    false
  }
}

def notifyNotGreen() {
  to = emailextrecipients([
    [$class: 'CulpritsRecipientProvider'],
    [$class: 'DevelopersRecipientProvider'],
    [$class: 'RequesterRecipientProvider']
  ])

  println "Build: Job '${env.JOB_NAME}': build '${env.BUILD_NUMBER}':\n" +
    "        see: ${env.BUILD_URL}"

  emailext to: to, subject: "Job '${env.JOB_NAME}': build '${env.BUILD_NUMBER}' finished with status: ${currentBuild.result}!",
    body: """
        JENKINS: ${env.JENKINS_URL} JOB URL: ${env.JOB_URL} Build: Job '${env.JOB_NAME}': build '${env.BUILD_NUMBER}':
        see: ${env.BUILD_URL}
    """
}