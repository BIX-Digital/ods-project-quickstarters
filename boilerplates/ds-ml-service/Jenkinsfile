def final projectId = '@project_id@'
def final componentId = '@component_id@'
def final credentialsId = "${projectId}-cd-cd-user-with-password"
def sharedLibraryRepository
def dockerRegistry
def training_route
def training_pod_info
def training_password
def training_username

def trainingConfig = [
    "docker-training"  : "${componentId}-training-service",
]

def predictionConfig = [
    "docker-prediction": "${componentId}-prediction-service"
]

node {
    sharedLibraryRepository = env.SHARED_LIBRARY_REPOSITORY
    dockerRegistry = env.DOCKER_REGISTRY
}

library identifier: 'ods-library@production', retriever: modernSCM(
    [$class       : 'GitSCMSource',
        remote       : sharedLibraryRepository,
        credentialsId: credentialsId])

// See readme of shared library for usage and customization.
odsPipeline(
    image: "${dockerRegistry}/cd/jenkins-slave-python",
    projectId: projectId,
    componentId: componentId,
    openshiftBuildTimeout: 25,
    branchToEnvironmentMapping: [
        'master': 'test',
        '*'     : 'dev'
    ]
) { context ->
    stageScanForSonarqube(context)
    stageUnitTests(context)
    stageBuild(context)
    stageStartMultipleOpenshiftBuild(context, "Build Training Image" ,trainingConfig)
    stageSetupTrainingEnvironmentVariables(context)
    stageMultipleDeployToOpenshift(context, "Deploy Training Pod", trainingConfig)
    stageTraining(context)
    stageIntegrationTest(context)
    stageStartMultipleOpenshiftBuild(context, "Build Prediction Image", predictionConfig)
    stageSetupPredictionEnvironmentVariables(context)
    stageMultipleDeployToOpenshift(context, "Deploy Prediction Pod", predictionConfig)
}

def stageLinter(def context) {
    stage('Linter') {
        // PEP8
        sh '''
pycodestyle --show-source --show-pep8 src/*
pycodestyle --statistics -qq src/*
  '''
    }
}

def stageUnitTests(def context) {
    stage('Unittests') {
        withEnv(["NEXUS_USERNAME=${context.nexusUsername}",
        "NEXUS_URL=${context.nexusHost}",
        "NEXUS_PASSWORD=${context.nexusPassword}"]) {
            sh 'pip install -i https://$NEXUS_USERNAME:$NEXUS_PASSWORD@${NEXUS_URL:8}/repository/pypi-all/simple -r src/requirements.txt --user'
            sh 'PYTHONPATH=src python3 -m unittest discover -s test/unittests -t .'
        }
    }
}


def stageBuild(def context) {
    stage('Prepare Docker Builds') {
        sh './build.sh'
    }
}

def stageTraining(def context) {
    stage('Train Model') {
        training_route = "http://localhost:8080"
        while(true) {
            training_pod_info = sh(returnStdout: true, script:"sleep 5 && oc get pods --sort-by=.status.startTime --no-headers -n ${context.targetProject} | grep ${context.componentId}-training-service | tail -n1").trim().split(/\s+/)
            print("Found pod name: ${training_pod_info[0]}")
            if (training_pod_info[2] == "Running") {
                print("Pod ${training_pod_info[0]} is running!!!")
                break
            }
            print("Pod ${training_pod_info[0]} is still not running...")
        }

        training_password = sh(returnStdout: true, script:"oc get secret ${context.componentId}-training-secret -o yaml -n ${context.targetProject} | grep password: | cut -d':' -f2 ").trim()
        training_username = sh(returnStdout: true, script:"oc get secret ${context.componentId}-training-secret -o yaml -n ${context.targetProject} | grep username: | cut -d':' -f2 ").trim()
        training_password = sh(returnStdout: true, script:"echo \"${training_password}\" | base64 --decode").trim()
        training_username = sh(returnStdout: true, script:"echo \"${training_username}\" | base64 --decode").trim()

        sh "oc port-forward ${training_pod_info[0]} 8080 -n ${context.targetProject} &"
        sh  "python3 jenkinsfile_helper.py --training-service ${training_route} --username \"${training_username}\" --password \"${training_password}\""
    }
}

def stageIntegrationTest(def context) {
    stage('Prediction Integration Test') {
        withEnv(["DSI_TRAINING_BASE_URL=${training_route}","DSI_TRAINING_SERVICE_USERNAME=${training_username}","DSI_TRAINING_SERVICE_PASSWORD=${training_password}"]) {
            sh 'PYTHONPATH=src python3 -m unittest discover -s test/integration_tests -t .'
        }
    }
}

def stageStartMultipleOpenshiftBuild(def context, def stageName, def buildConfigs = null) {
    if (buildConfigs != null) {
        stage(stageName) {
            if (!context.environment) {
                println("Skipping for empty environment ...")
                return
            }
            buildConfigs.each { dockerFolder, buildConfig ->
                timeout(context.openshiftBuildTimeout) {
                    patchBuildConfig(context, buildConfig)
                    sh "oc start-build  --from-dir ${dockerFolder} --follow -n ${context.targetProject} " +
                    "${buildConfig}"
                }
            }
        }
    } else {
        stageStartOpenshiftBuild(context)
    }
}

private void patchBuildConfig(def context, def componentId = null) {
    sh """oc patch bc ${componentId ?: context.componentId} --type=json --patch '[
    {"op": "replace", "path": "/spec/source", "value":{"type":"Binary"}},
    {"op": "replace", "path": "/spec/output/to/name", "value":"${componentId ?: context.componentId}:${
        context.tagversion
    }"},
    {"op": "replace", "path": "/spec/strategy/dockerStrategy", "value":{"buildArgs":[
        {"name": "NEXUS_URL" ,"value": "${context.nexusHost}"},
        {"name": "NEXUS_USERNAME" ,"value": "${context.nexusUsername}"},
        {"name": "NEXUS_PASSWORD" ,"value": "${context.nexusPassword}"}]}},
    ]' -n ${context.targetProject}"""
}

def stageSetupTrainingEnvironmentVariables(def context) {
    stage ("Setup Training Environment Variables") {
        if (!secretExists(context.projectId, context.environment, "${context.componentId}-training-secret")) {
            tmpHash = randomHash(32)
            sh "oc create secret generic ${context.componentId}-training-secret --from-literal=username=${context.componentId}-training-username --from-literal=password=`dd if=/dev/urandom bs=1 count=32 2>/dev/null | base64  | rev | cut -b 2- | rev | tr -cd '[:alnum:]'` -n ${context.targetProject}"
        }

        sh "oc env dc/${context.componentId}-training-service --env=DSI_EXECUTE_ON=LOCAL -n ${context.targetProject}"
        sh "oc env dc/${context.componentId}-training-service --from=secret/${context.componentId}-training-secret --prefix=DSI_TRAINING_SERVICE_ -n ${context.targetProject}"
    }
}

def stageSetupPredictionEnvironmentVariables(def context) {
    stage ("Setup Prediction Environment Variables") {
        if (!secretExists(context.projectId, context.environment, "${context.componentId}-prediction-secret")) {
            tmpHash = randomHash(32)
            sh "oc create secret generic ${context.componentId}-prediction-secret --from-literal=username=${context.componentId}-prediction-username --from-literal=password=`dd if=/dev/urandom bs=1 count=32 2>/dev/null | base64  | rev | cut -b 2- | rev | tr -cd '[:alnum:]'` -n ${context.targetProject}"
        }

        sh "oc env dc/${context.componentId}-prediction-service --env=DSI_TRAINING_BASE_URL=http://${context.componentId}-training-service.${context.targetProject}.svc:8080 -n ${context.targetProject}"
        sh "oc env dc/${context.componentId}-prediction-service --from=secret/${context.componentId}-training-secret --prefix=DSI_TRAINING_SERVICE_ -n ${context.targetProject}"
        sh "oc env dc/${context.componentId}-prediction-service --from=secret/${context.componentId}-prediction-secret --prefix=DSI_PREDICTION_SERVICE_ -n ${context.targetProject}"
    }
}

private boolean secretExists(String projectId, String environment, String secret) {
    ret = sh(script: "oc get secrets -n ${projectId}-${environment}", returnStdout: true)
    if (ret.trim().contains(secret)) {
        return true
    }
    return false
}

def stageMultipleDeployToOpenshift(def context, def stageName, def buildConfigs = null) {
    if (buildConfigs != null) {
        stage(stageName) {
            if (!context.environment) {
                println("Skipping for empty environment ...")
                return
            }
            buildConfigs.each { dockerFolder, buildConfig ->
                openshiftTag(
                        srcStream: buildConfig,
                        srcTag: context.tagversion,
                        destStream: buildConfig,
                        destTag: "latest",
                        namespace: context.targetProject
                )
            }
        }
    } else {
        stageDeployToOpenshift(context)
    }
}
