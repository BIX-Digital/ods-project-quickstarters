/* generated jenkins file used for building and deploying @component_id@ in projects @project_id@ */
def final projectId = '@project_id@'
def final componentId = '@component_id@'
def final credentialsId = "${projectId}-cd-cd-user-with-password"
def sharedLibraryRepository
def dockerRegistry
def trainingRoute
def trainingPodInfo
def trainingPassword
def trainingUsername
def trainingConfig = "${componentId}-training-service"
def predictionConfig = "${componentId}-prediction-service"

node {
    sharedLibraryRepository = env.SHARED_LIBRARY_REPOSITORY
    dockerRegistry = env.DOCKER_REGISTRY
}

library identifier: 'ods-library@production', retriever: modernSCM(
    [$class       : 'GitSCMSource',
        remote       : sharedLibraryRepository,
        credentialsId: credentialsId])

// See readme of shared library for usage and customization.
odsPipeline(
    image: "${dockerRegistry}/cd/jenkins-slave-python",
    projectId: projectId,
    componentId: componentId,
    testResults : 'tests-results',
    openshiftBuildTimeout: 25,
    branchToEnvironmentMapping: [
        'master': 'test',
        '*'     : 'dev'
    ]
) { context ->
    stageScanForSonarqube(context)
    stageBuild(context)
    stageCustomStartOpenshiftBuild(context, "Build Training Image" ,trainingConfig)
    stageCustomDeployToOpenshift(context, "Deploy Training Pod", trainingConfig)
    stageUnitTestsTraining(context)
    stageTraining(context)
    stageIntegrationTestTraining(context)
    stageCustomStartOpenshiftBuild(context, "Build Prediction Image", predictionConfig)
    stageCustomDeployToOpenshift(context, "Deploy Prediction Pod", predictionConfig)
}

def stageLinter(def context) {
    stage('Linter') {
        // PEP8
        sh '''
        pycodestyle --show-source --show-pep8 src/*
        pycodestyle --statistics -qq src/*
        '''
    }
}

def stageBuild(def context) {
    stage('Prepare Docker Builds') {
        sh './build.sh'
    }
}

def stageUnitTestsTraining(def context) {
    stage('Unittests') {
        trainingPodInfo = sh(returnStdout: true, script:"oc get pods --sort-by=.status.startTime --no-headers -n ${context.targetProject} | grep ${context.componentId}-training-service | tail -n1").trim().split(/\s+/)
        print("Running Unit Tests in pod ${trainingPodInfo[0]}")
        sh(returnStdout: true, script: "oc exec ${trainingPodInfo[0]} bash ./run_unittests.sh -n ${context.targetProject}")
    }
}

def stageTraining(def context) {
    stage('Train Model') {
        sh(returnStdout: true, script:"pip install -i ${context.nexusHostWithBasicAuth}/repository/pypi-all/simple --trusted-host ${context.nexusHost.tokenize('//')[1]}  requests --user")

        trainingRoute = "http://localhost:8080"

        trainingPassword = sh(returnStdout: true, script:"oc get secret ${context.componentId}-training-secret -o yaml -n ${context.targetProject} | grep password: | cut -d':' -f2 ").trim()
        trainingUsername = sh(returnStdout: true, script:"oc get secret ${context.componentId}-training-secret -o yaml -n ${context.targetProject} | grep username: | cut -d':' -f2 ").trim()
        trainingPassword = sh(returnStdout: true, script:"echo \"${trainingPassword}\" | base64 --decode").trim()
        trainingUsername = sh(returnStdout: true, script:"echo \"${trainingUsername}\" | base64 --decode").trim()

        sh "oc port-forward ${trainingPodInfo[0]} 8080 -n ${context.targetProject} &"
        // wait for port-forward to map the ports or for 10s
        sh "timeout 10s bash -c 'until ! curl -v --silent http://localhost:8080 2>&1 | grep -m 1 \"Connection refused\"; do sleep 1 ; done'; echo -e \\\\a"
        // trigger model training
        sh "python3 jenkinsfile_helper.py --training-service ${trainingRoute} --username \"${trainingUsername}\" --password \"${trainingPassword}\""
        // get the model for the prediction build
        sh "curl -Lv --user \"${trainingUsername}\":\"${trainingPassword}\" \"${trainingRoute}\"/getmodel -o docker/dist/\"${context.getGitCommit()}\""
    }
}

def stageIntegrationTestTraining(def context) {
    stage('Integration Tests') {
        trainingPodInfo = sh(returnStdout: true, script:"oc get pods --sort-by=.status.startTime --no-headers -n ${context.targetProject} | grep ${context.componentId}-training-service | tail -n1").trim().split(/\s+/)
        print("Running Integration Tests in pod ${trainingPodInfo[0]}")
        sh(returnStdout: true, script: "oc -n ${context.targetProject} exec ${trainingPodInfo[0]} bash ./run_integration_tests.sh")
        sh(returnStdout: true, script: "oc -n ${context.targetProject} exec ${trainingPodInfo[0]} cat nosetests.xml > testresults.xml")
        sh "mkdir -p tests-results && mv testresults.xml tests-results/"
        junit 'tests-results/testresults.xml'
    }
}

def stageCustomStartOpenshiftBuild(def context, def stageName, def buildConfig) {
    stage(stageName) {
        if (!context.environment) {
            println("Skipping for empty environment ...")
            return
        }
        timeout(context.openshiftBuildTimeout) {
            patchBuildConfig(context, buildConfig)
            sh "oc start-build ${buildConfig} --from-dir docker --follow -n ${context.targetProject}"
        }
    }
}

private void patchBuildConfig(def context, def componentId) {
    def splitComponentId = componentId.tokenize('-')
    sh """oc patch bc ${componentId} --type=json --patch '[
    {"op": "replace", "path": "/spec/source", "value":{"type":"Binary"}},
    {"op": "replace", "path": "/spec/output/to/name", "value":"${componentId}:${context.tagversion}"},
    {"op": "replace", "path": "/spec/strategy/dockerStrategy", "value":{"buildArgs":[
            {"name": "nexusHostWithBasicAuth" ,"value": "${context.nexusHostWithBasicAuth}"},
            {"name": "nexusHostWithoutScheme" ,"value": "${context.nexusHost.tokenize('//')[1]}"},
            {"name": "serviceType" ,"value": "${splitComponentId[ splitComponentId.size() - 2 ]}"}
        ]}},
    ]' -n ${context.targetProject}"""
}

def stageCustomDeployToOpenshift(def context, def stageName, def buildConfig) {
    stage(stageName) {
        if (!context.environment) {
            println("Skipping for empty environment ...")
            return
        }
        openshiftTag(
            srcStream: buildConfig,
            srcTag: context.tagversion,
            destStream: buildConfig,
            destTag: "latest",
            namespace: context.targetProject
        )
    }
    waitForTrainingPod(context, buildConfig)
}

def waitForTrainingPod(def context, def buildConfig) {
    if(buildConfig.contains('training')) {
        print("Start waiting for training pod to be running...")
        while(true) {
            trainingPodInfo = sh(returnStdout: true, script:"sleep 5 && oc get pods --sort-by=.status.startTime --no-headers -n ${context.targetProject} | grep ${context.componentId}-training-service | tail -n1").trim().split(/\s+/)
            print("Waiting for training pod ${trainingPodInfo[0]} to be running...")
            if (trainingPodInfo[2] == "Running") {
                print("Pod ${trainingPodInfo[0]} is running!!!")
                break
            }
            print("Pod ${trainingPodInfo[0]} is still not running...")
        }
    }
}
